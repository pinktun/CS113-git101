การสร้าง/แยก Branch
1. clone git repository จากคาบที่แล้วมาทำงาน
        git clone <git-url>
    (อย่าลืมเปลี่ยน working directory cd git101)
2. คำสั่งการสร้าง Branch
        git branch <branch-name>
    เช่น สร้าง Branch feature
        git branch feature
    การสร้าง Branch ที่แยกออกจาก Branch เดิม (Branch หลักคือ master) เป็นการแยกส่วนการพัฒนาออกจากกัน ไม่ให้ปนกัน เพื่อคงสภาพ Checkpoint ที่เป็นส่วนใหญ่
3. ตรวจสอบว่ามี Branch ใดบ้าง ใช้คำสั่ง
        git branch
    จะมี * อยู่หน้าชื่อ Branch ที่กำลังพัฒนาอยู่ในปัจจุบัน (master)
4. เปลี่ยน Branch ไปที่ feature ด้วยคำสั่ง
        git chechout feature
5. ตรวจสอบ Branch อีกรอบ
         git branch
    * จะไปอยู่ข้างหน้า Branch feature

การ Merge Branch แบบไม่มี Conflict
6. เพิ่มไฟล์ feature1.txt ใน branch feature และเพิ่มไฟล์ master1.txt ใน branch master
        $ git checkout feature
            // เพิ่มไฟล์ feature1.txt
        $ git status    (บรรทัดแรก: จะบอกว่าอยู่ใน branch ไหน)
        $ git add feature1.txt
        $ git commit -m "Add feature1.txt in branch feature"

        $ git checkout master   (ไฟล์ feature1.txt หายไป)
            // เพื่มไฟล์ master1.txt
        $ git status 
        $ git add master1.txt
        $ git commit -m "Add master1.txt in branch master"
7. ใช้ git log adog ดู Checkpoint ทั้งหมด
        git log --all --decorate --oneline --graph
    มี branches คือ master และ feature และ origin/master ยังอยู่ที่เก่า
8. push master ขึ้น github ใช้ git log adog ดู Checkpoint ทั้งหมด สังเกตสิ่งที่เปลี่ยนแปลง
        git chechout master
        git log --all --decorate --oneline --graph
        git push origin master
        git log --all --decorate --oneline --graph
9. push feature ขึ้น  github ใช้ git log adog ดู Checkpoint ทั้งหมด สังเกตสิ่งที่เปลี่ยนแปลง
        git checkout feature
        git log --all --decorate --oneline --graph
        git push origin feature
        git log --all --decorate --oneline --graph
10. ลอง merge โดยให้ งานใน feature ไปรวมกันใน master
    เปลี่ยนไปที่ Branch ปลายทางก่อน (master)
        git checkout master
    รวม Branch (merge) feature ให้ไปอยู่ใน master
        git merge feature
11. เมื่อไม่มี conflict จะทำให้ git สร้าง commit ของการ merge นั้นไปเลย ดังนั้น เราต้องใส่ commit message ด้วย vi ถ้าใช้ default merge commit message ให้กด ESC แล้วพิมพ์ :wq! แล้วกด Enter
12. เมื่อ merge แล้ว จะเห็นว่ามีทั้งไฟล์ master1.txt และ feature1.txt อยู่ใน Branch master
13. สังเกต git log adog จะเห็นเส้นของการรวม Branch 
        git log --all --decorate --oneline --graph  
14. push master ขึ้น github จะถือว่าการ merge นั้น สมบูรณ์
        git push origin master

การ Pull แบบไม่มี Conflict
15. ให้ clone git repository มาไว้อีกเครื่อง หรือ directory ใหม่ เช่น git102
        cd ..
        git clone <git-url> git102
        cd git102
16. เพิ่มไฟล์ new-1.txt ใน directory ใหม่ (git102) แล้ว push ไปที่ github
        git add new-1.txt
        git commit -m "add new1.txt by user2"
        git push origin master
17. กลับมาที่เครื่องเก่า แล้ว pull การเปลี่ยนแปลงลงมาที่ local repository
        cd ..
        cd git101
        ls -1                       (ไม่มีไฟล์ new-1.txt)
        git pull origin master      (ดึงการเปลี่ยนแปลงจาก branch master)
        ls -1                       (มีไฟล์ new-1.txt)

การ Merge แบบมี Conflict
    Conflict หรือความขัดแย้ง เกิดจากการปรับแก้ไขข้อมูลในไฟล์เดิม บรรทัดเดิม ที่อยู่ต่าง Branchก กัน เมื่อ merge แล้ว git ตัดสินใจไม่ได้ว่าจะใช้ข้อมูลจาก branch ใด
18. สร้าง Branch feature2 และสลับไป Branch นั้น ด้วยคำสั่ง
        git checkout -b feature2

19. แก้ไขไฟล์ b.txt ใน branch feature2 และ master ในบรรทัดเดียวกัน ให้มีข้อความที่ต่างกัน
        $ git chechout feature2
            // แก้ไขไฟล์ b.txt บรรทัดแรก ให้มีข้อความหนึ่ง
        $ git status
        $ git add b.txt
        $ git commit -m "update b.txt first line in branch feature2"
        $ git log --all --decorate --oneline --graph

        $ git chechout master
            //  แก้ไขไฟล์ b.txt บรรทัดแรก ให้มีข้อความสองที่แตกต่างจากข้อความหนึ่ง
        $ git status
        $ git add b.txt
        $ git commit -m "update b.txt first line in branch master"
        $ git log --all --decorate --oneline --graph
20. merge branch feature2 เข้าไปใน branch master (ไม่ต้อง push ก็ merge ได้)
        git chechout master
        git merge feature2
    merge ไม่สำเร็จ มีข้อความว่าเกิด conflict ขึ้น
21. เปิดไฟล์ b.txt ใน master จะเห็นว่า git สร้างข้อความอธิบาย conflict หาก Editor มี tool ที่ช่วยจัดการ conflict เช่น Atom สามารถเลือกว่าจะใช้ข้อมูลจาก branch หาก Editor ไม่มี tool ช่วย
    เช่น sublime ต้องเพิ่ม/แก้/ลบ เอง 
22. หลักจากแก้ไข conflict เสร็จแล้ว ให้ commit การ merge นั้น
        git add b.txt
        git status 
        git commit -m "merge branch 'feature2' and resolve conflict"
        git log --all --decorate --oneline --graph
23. push ขึ้น github
        git push origin master
        git log --all --decorate --oneline --graph
    ไม่จำเป็นต้อง push feature2 เพราะถูก merge ไปกับ master แล้ว

การ Pull แบบมี Conflict
24. ในเครื่องใหม่ ให้แก้ไขข้อมูลใน new-1.txt แล้ว commit และ push ไปที่ github
        $ cd ..
        $ cd git102
        $ git pull origin master
            // แก้ไขไฟล์ new-1.txt ใน git102
        $ git status 
        $ git add new-1.txt
        $ git status
        $ git commit -m "update new-1.txt by user2"
        $ git log --all --decorate --oneline --graph
        $ git push origin master
        $ git log --all --decorate --oneline --graph
25. ในเครื่องเก่า ให้แก้ไขข้อมูลใน new-1.txt บรรทัดเดียวกับข้อ 24 แล้ว commit
        $ cd ..
        $ cd git101
            //  แก้ไขไฟล์ new-1.txt บรรทัดเดียวกับข้อ 23 ให้มีข้อความใหม่
        $ git status
        $ git add new-1.txt
        $ git status
        $ git commit -m "update new-1.txt too"
        $ git log --all --decorate --oneline --graph
26. ก่อน Push ให้ Pull origin/master พบว่ามีการ Pull นี้ มี conflict เกิดขึ้น 
    ให้แก้ไข conflict ในไฟล์ new-1.txt จากนั้นสร้าง commit แล้ว push ไปที่ github
        $ git pull origin master
        $ git status
            //  แก้ไข conflict ในไฟล์ new-1.txt
        $ git add new.1-txt
        $ git status
        $ git coommit -m "merge and resolve conflict in new-1.txt"
        $ git log --all --decorate --oneline --graph
        $ git push origin master
        $ git log --all --decorate --oneline --graph
27. ที่เครื่องใหม่จะเห็นว่า Checkpoint ตามหลัง origin/master อยู่ 
        cd ..
        cd git102
        git log --all --decorate --oneline --graph
    ให้ pull ลงมา สังเกตว่าไม่เกิด conflict เพราะไม่มีการแก้ไขอะไรเพิ่มเติม
        git pull origin master
        git log --all --decorate --oneline --graph