Pointers และ Dynamic Memory Allocation

1. Pointer and Addresses
- Pointer เป็นตัวแปรที่ใช้เก็บค่าตำแหน่งหรือ Addresses
- การเขียนโค้ดที่จะให้ตัวแปร pointer p อ้างอิงไปตำแหน่งในหน่วยความจำเก็บค่าของตัวแปร c ทำได้ดังนี้
    int c;
    int *p;
    p = &c;

2. Pointer Operators
    1. & เรียกว่า address operators
    - & เป็น operator ที่ใช้หาค่าตำแหน่งในหน่วยความจำของ operand
    2. * เรียกว่า dereferencing operator หรือ indirection operator ถูกใช้ในการอ้างอึงเข้าถึงข้อมูลที่ถูกอ้างอิงโดยค่าตำแหน่งในหน่วยความจำที่มีค่าเป็น operand
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    #include <stdio.h>
    int main()
    {   int c = 5;
        int *p;
        p = &c;
        printf(" c = %d\n", c);
        printf("*p = %d\n", *p);
    }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    #include <stdio.h>
    int main ()
    {   int *a_ptr, a;
        a = 10;
        a_ptr = &a;
        printf("(1) a = %d, *a_ptr = %d\n", a, *a_ptr);
        *a_ptr *= 2;
        printf("(2) a = %d, *a_ptr = %d\n\n", a, *a_ptr);
        printf("The address of a is %p\n"
                "The value of a_ptr is %p\n\n", &a, a_ptr);
        printf("&*a_ptr = %p\n", &*a_ptr);
        printf("*&a_ptr = %p\n", *&a_ptr);
    }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2.1 ฟังก์ชัน scanf()
- คล้ายฟังก์ชัน printf() แต่ตทำงานตรงกันข้าม printf() แสดงผลไปที่ standard output (เช่น หน้าจอ) แต่ scanf() รับข้อมูลมาในโปรแกรมผ่าน standard input (เช่น คีย์บอร์ด)

3. Pointer กับ Arrays
- อาร์เรย์เก็บข้อมูลมากกว่า 1 จำนวนที่เป็นประเภทเดียวกันได้

4. การจำลองการเรียกใช้ฟังก์ชันแบบ Call by Reference
- การส่งผ่านค่าพารามิเตอร์ไปยังฟังก์ชันทำได้ 2 ลักษณะ เรียกว่า call by value และ call by reference (ภาษา C ไม่มี call by reference แต่ C++ มี)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#include <stdio.h>
void swap(int x, int y)
{   int temp;
    temp = x;
    x = y;
    y = temp;
}
int main()
{   int x = 3, y = 4;
    printf("กอน่ x = %d, y = %d\n", x, y);
    swap(x, y);
    printf("หลงั x = %d, y = %d\n", x, y);
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5. การใช้ const กับ pointers
- ใน ANSI C Standard คีย์เวิร์ด const สามารถใช้ร่วมกับ pointer เพื่อแจ้งให้คอมไพเลอร์ทราบว่าค่าตัวแปรนั้นไม่สามารถเปลี่ยนค่าได้

6. นิพจน์ใน pointer และการใช้ตัวดำเนินการคณิตศาสตร์กับ pointer
ความหมายของนิพจน์ที่มี pointer กับตัวดำเนินการคณิตศาสตร์
- นิพจน์ทางคณิตศาสตร์ เช่น 2000 + 4 มีค่าเท่ากับ 2004 เมื่อนำมาใช้กับ pointer จะไม่เป็นเช่นนั้น
- นิพจน์ pf = pf + 2 หมายถึงให้เพิ่มค่า pf ขึ้นไปเป็นจำนวน 2 เท่า เช่น ถ้าเป็น float มีค่าเป็น 2*4=8 byte นิพจน์นี้จะเพิ่มค่า pf ขึ้นไปอีก 8 หน่วย

7. การใช้ pointer อ้างไปที่ฟังก์ชัน (Pointer to Functions)
การประกาศตัวแปร pointer ที่จะใช้อ้างไปยังฟังก์ชันในรูปแบบที่ต้องการ
- ถ้าต้องประกาศตัวแปร pfunc ที่ใช้เก็บ base address ของประเภทข้อมูล double กลับไปหาผู้เรียก และมีการรับพารามิเตอร์ 2 ตัว ที่มีประเภทเป็น int และ float
    double (*pfunc)(int, float) // ทำวงเล็บแรกก่อน
    // (*pfunc) ตัวแปร pointer ที่ใช้เก็บ address ของฟังก์ชันที่รับพารามิเตอร์ประเภท int float แล้วส่งค่ากลับเป็น double

8. การจองหน่วยความจำ (Dynamic Memory Allocation)
- ที่ผ่านมาขนาดพื้นที่ไม่สามารถเปลี่ยนแปลงได้ตลอดการทำงานโปรแกรม แต่บางครั้งต้องการจองพื้นที่ตามขนาดที่เราต้องการขณะโปรแกรมทำงานอยู่ รวมถึงสามารถคืนพื้นที่ที่เคยจองไว้หากไม่ได้ใช้งาน
- สามารถใช้ฟังก์ชัน malloc() และ free() เพื่อจองและคืนพื้นที่ในหน่วยความจำได้
- หน่วยความจำที่จองด้วย malloc() จะถูกเก็บในหน่วยความจำที่เป็นส่วนของ help segment
การใช้ malloc()
int *data;
data = (int*)malloc(1000*sizeof(int));
- เป็นจำนวน byte ที่ใช้จองพื้นที่ ประเภทส่งกลับเป็น (void*) 
- หากหน่วยความจำในระบบไม่พอให้จอง จะส่งค่า NULL กลับมายังผู้เรียก
การใช้ free()
free(data);
- เป็นตำแหน่งในหน่วยความจำที่เราต้องการคืนพื้นที่ให้กับระบบ

9. Complicated Declarations
int *f1(); // เป็นการประกาศฟังก์ชัน f1 ที่ส่งค่า pointer ไปยัง int กลับ
int (*f2)(); // ประกาศตัวแปร pointer f2 ที่สามารถเก็บค่าคำแหน่งของฟังก์ชันที่ส่งค่า int กลับ
int *(*f3)(); // ประกาศตัวแปร pointer f3 ที่สามารถเก็บคาตำแหน่งของฟังก์ชันที่ส่งค่า pointer ไปยัง int กลับ
int *daytab[13]; // ประกาศตัวแปรอาเรย์ daytab (จำนวน13ตัว) ที่เก็บ pointer ไปยัง int

10. Segmentation fault (core dumped)
- หากพยายามเข้าถึงหน่วยความจำที่ไม่ได้จองไว้หรือหน่วยความจำที่นอกเหนือจากตัวแปรที่ประกาศไว้ มีโอกาศที่ระบบจะหยุดการทำงาน โดยระบบ UNIX มักแสดงข้อความว่า Segmentation fault ออกมาบนจอให้รับรู้
