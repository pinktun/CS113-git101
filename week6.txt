Array

อาร์เรย์คือ 
- กลุ่มตัวแปรที่ถูกจัดการร่วมกัน
    - จัดการอัตโนมัติโดยคอมไพล์เลอร์
    - สร้าง, เรียกใช้
- ตัวแปรต้องเป็นประเภทเดียวกัน
    - ใช้ชื่อเดียวกัน มีเบอร์ประจำแต่ละตัวแปร

การประกาศอาร์เรย์
int A[10];
int ต้วแปรทุกตัวในอาร์เรย์ต้องเป็นประเภทเดียวกัน
A ชื่อของอาร์เรย์ 
[] เครื่องหวายก้ามปูเปิดและปิด เป็นการบอกว่าเป็นอาร์เรย์
10 จำนวนตัวแปรในอาร์เรย์ คือขนาด (size) ของอาร์เรย์

การเรียกใช้อาร์เรย์
- ตัวแปรแต่ละตัวมีเบอร์กำกับ (index) 
    int A[10]; (ระบุขนาด)      A[2] = 5; (indexที่2)
- เบอร์ของตัวแปรในอาร์เรย์เริ่มจากศูนย์ (0)
    int A[10];
    A[0] ถึง A[9] ไม่มี A[10] 
    ถ้าเรียกใช้ A[10] ก็จะไปเรียกใช้ตำแหน่งถัดจาก A[9] ไป

การตั้งค่าเริ่มต้นของอาร์เรย์
int A[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
int A[10] = {0, 1, 2, 3, 4}; //ถ้ากำหนดไม่ครบที่เหลือเป็น0

การวนลูปเพื่อจัดการกับตัวแปรทุกตัวในอาร์เรย์
for (i = 0; i < 10; i++)
หรือ
for (i = 0; i <= 10 - 1; i++)
ต.ย. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#include <stdio.h>
int main() {
    int A[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    int i;

    for (i = 0; i < 10; i++)
        printf("A[%d] = %d\n", i, A[i]);
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A[0] = 0
A[1] = 1
A[2] = 2
A[3] = 3
A[4] = 4
A[5] = 5
A[6] = 6
A[7] = 7
A[8] = 8
A[9] = 9

กำหนดขนาดอาร์เรย์ตามจำนวนค่าตั้งต้น
ทำแบบนี้ได้ int A[] = {0, 1, 2, 3, 4}; แต่ต้องระวังเรื่องขนาดเอง

รายละเอียดการใช้งาน
- ขนาดตอนประกาศควรเป็นค่าคงที่ (constant)
- ใช้ #define directive ช่วย หรือ const คีย์เวิร์ด

#define
- #define เป็นคำสั่ง (directive) ที่สั่งให้ compiler เปลี่ยนอักษรทั้งหมดในโปรแกรมก่อนคอมไพล์
    #define arraySize 5 //ประกาศก่อน int main
- เปลี่ยนคำว่า arraySize ให้เป็น 5 ให้หมด
    int A[arraySize];
    จะกลายเป็น
    int A[5];

const
- คีย์เวิร์ดบังคับว่าตัวแปรนี้จะไม่มีการเปลี่ยนแปลงตลอดการทำงานทำงานของโปรแกรม
- ต้องตั้งต่าทันทีตอนประกาศ
    const int arraySize = 5;

ความแตกต่าง
- #define เปลี่ยนอักษรทั้งหมดในโปรแกรม
- const int เป็นการประกาศตัวแปร
    - ชื่อตัวแปรต้องถูกตามข้อกำหนด
    - ตัวแปรส่งผลตาม scope

การใช้ตัวแปรกำหนดขนาดอาร์เรย์
- ใช้ได้กับคอมไพเลอร์ที่ทำตามมาตรฐาน C99
- อย่าเปลี่ยนค่า arraySize
ต.ย.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#include <stdio.h>
int main() {
    int arraySize, i;

    printf("Enter Array Size: ");
    scanf("%d", &arraySize);

    int A[arraySize];

    for (i = 0; i < arraySize; i++) {
        A[i] = arraySize - i;
        printf("A[%d] is %d\n", i, A[i]);
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

pass by value 
- ก๊อปปี้ค่าของตัวแปรจากผู้เรียกไปให้ฟังก์ชัน
- สร้างตัวแปร local variable ใหม่
- เปลี่ยนแปลงค่าในฟังก์ชันไม่ส่งผลถึงตัวแปรต้นตำรับ
pass by reference
- ส่งตำแหน่งของตัวแปรจากผู้เรียกไปให้ฟังก์ชัน
- ตัวแปรในฟังก์ชันเป็นตัวเดียวกันกับในผู้เรียก
- การเปลี่ยนแปลงค่าในฟังก์ชันเปลี่ยนตัวแปรต้นตำรับด้วย

ชื่อของอาร์เรย์
- บอกตำแหน่งเริ่มต้นของอาร์เรย์นั้น
    int A[10];
- A[0] คือค่า (value) ที่เก็บไว้ในตัวแปรแรก
- A[1] คือค่าที่เก็บไว้ในตัวแปรตัวถัดไป
- A คือตำแหน่งเริ่มต้นของอาร์เรย์ (ซึ่งเท่ากับตำแหน่งของA[0]ด้วย)

2D array
ตั้งค่าเริ่มต้นของอาร์เรย์สองมิติ
- ตั้งค่าแบบอาร์เรย์ซ้อนอาร์เรย์
    int A[2][3] = { {1,2,3} , {4,5,6} }
    // 1 2 3
    // 4 5 6
    int A[2][3] = { {1,2} , {3} }
    // 1 2 0
    // 3 0 0
    int A[2][3] = { {1,2,3} }
    // 1 2 3
    // 0 0 0
- int A[][] = { {1,2,3} , {4,5,6} } ไม่ได้
- int A[][3] = { {1,2,3} , {4,5,6} } ได้

อาร์เรย์มากกว่าสองมิติ
- int A[2][3][4];
- แต่ในเมมโมรีก็ยังเป็น 1 มิติ
- นอกนั้นคล้ายอาร์เรย์ 2 มิติทุกอย่าง